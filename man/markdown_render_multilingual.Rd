% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/markdown.R
\name{markdown_render_multilingual}
\alias{markdown_render_multilingual}
\alias{markdown_localise}
\title{Multilingual markdown}
\usage{
markdown_render_multilingual(
  input,
  ...,
  languages = NULL,
  tr = NULL,
  combine = NULL
)

markdown_localise(input, languages = NULL, tr = NULL)
}
\arguments{
\item{input}{The input file to be rendered. This should be an Rmd
document at present, but we may expand to support more options
later.}

\item{...}{Additional arguments to pass through to
\link[rmarkdown:render]{rmarkdown::render}}

\item{languages}{Optionally a vector of languages to render. By
default, all languages in the \code{traduire:languages} frontmatter
section will be rendered (see Details)}

\item{tr}{Optionally a translator object. If given, then it
overrides any definition in the metadata.}
}
\value{
A list with information about the created files
}
\description{
A multilingual version of \link[rmarkdown:render]{rmarkdown::render}, which takes an
appropriately internationalised rmarkdown file (see Details) and
creates output in multiple languages. This differs significantly
from \code{\link[rmarkdown:render]{rmarkdown::render}} in that the knitr document will be
compiled several times (once for each language), and there are
multiple ways that this can be compiled together (or not)
afterwards.
}
\details{
There is no single simple way of internationalising markdown,
LaTeX or html, though lots of tools exist to help. The approach we
take here is simply to localose the input once per language so
that \code{file.Rmd} becomes \code{file-en.Rmd}, then compile that to (say)
\code{file-en.html}. By having an entirely single-language .Rmd
intermediate we can support hopefully all features of
rmarkdown. The \code{markdown_localise} function directly exposes this
functionality.  This does mean that if you need to compile Rmds
for many different languages, \code{render} will be called many times
and even a relatively quick Rmd will become painful.  You may need
to investigate manual caching (e.g., saving and loading rds files)
to get around this.
}
\section{Creating an internationalised Rmd}{


Add a configuration section to your frontmatter, something like:\preformatted{---
title: t_("title")
author: A. N. Author
traduire:
  resources: "ex.json"
  languages: ["en", "fr", "es"]
---
}

Here, the title will be localised (looking up the \code{title}
key). The \code{\link{i18n}} object will be initialised by
loading the resources file \code{ex.json}, and the document will be,
by default, created in English (\code{en}), French (\code{fr}) and
(\code{es}). In order for that to work, we'll still need to provide
translations for every language!

You can omit the \code{languages} section (or override it) by passing
in a \code{languages} vector.  This is useful in development for
running a single language.

You can omit this entire block if you provide the \code{tr} and
\code{languages} arguments to the function.
}

\section{Prose}{


Prose sections (i.e., everything that is outside of the code
chunks) can be internationalised by using a syntax following
Pandoc's "fenced divs".  We can write:\preformatted{::: \{lang=en\}
Plot of random points
:::

::: \{lang=fr\}
Tracé de points aléatoires
:::
}

These can span as many lines as wanted.  When running
\code{markdown_render_multilingual} for a language, only matching
language codes will be included.
}

\section{Code}{


For internationalising code sections, use the \code{t_} function
(without namespace prefix)\preformatted{```\{r\}
set.seed(1)
plot(runif(10), xlab = t_("time"), ylab = t_("things"))
```
}

You do not need to initialise a translation object (via
\code{traduire::i18n}) as this will be created and configured before
rendering the document. The translations will be applied
\emph{before} evaluation, so that in English (\code{en}) this might become\preformatted{```\{r\}
set.seed(1)
plot(runif(10), xlab = "Time", ylab = "Things")
```
}

and then rendered as usual. This ensures that all strings in the
created plots and code chunks are translated appropriately.
}

