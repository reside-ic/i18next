% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/translator.R
\name{translator_register}
\alias{translator_register}
\alias{translator_unregister}
\alias{translator_translate}
\alias{t_}
\alias{translator}
\alias{translator_set_language}
\title{Register a translator}
\usage{
translator_register(translations, language = NULL, name = NULL)

translator_unregister(name = NULL)

translator_translate(..., name = NULL)

t_(..., name = NULL)

translator(name = NULL)

translator_set_language(language, name = NULL)
}
\arguments{
\item{translations}{Path to a json file containing translations}

\item{language}{Language to use, passed through to
\code{\link{i18n}}'s \code{set_language} method}

\item{name}{Optional name for the translator.  If omitted, this
will be determined automatically if called from package code}

\item{...}{Arguments passed to \code{\link{i18n}}'s \code{t}
method, being \code{string}, \code{data}, \code{language} etc.}
}
\description{
Register a translator within the \code{traduire} package, and use
it directly. This will allow your code to access translations via
\code{translator_translate} (or more concisely \code{t_}) without
having to pass around a translation object.  If called from
package code (and assuming a single translator per package) then
the \code{name} argument can be omitted and will be automatically
converted into \code{package:<packagename}).
}
\section{Use in package code}{


The intention is that this would typically be called from
  \code{.onLoad}, something like:

\preformatted{
.onLoad <- function(...) {
  path <- system.file("traduire.json", package = "hello", mustWork = TRUE)
  traduire::translator_register(path, "en")
}
}

and then used from that package's code as

\preformatted{
traduire::t_("key")
}

The language option for this translator can be changed by

\preformatted{
traduire::translator_set_language("es")
}

Every package's translator object is isolated from every other
  package, and if the \code{traduire} functions are called from
  your package code, then the correct translator should be found
  automatically.
}

\examples{
path <- system.file("examples/simple.json", package = "traduire")
traduire::translator_register(path, name = "myexample")
traduire::t_("hello", language = "fr", name = "myexample")
traduire::translator_unregister("myexample")
}
