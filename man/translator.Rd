% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/translator.R
\name{translator_register}
\alias{translator_register}
\alias{translator_unregister}
\alias{translator_translate}
\alias{t_}
\alias{translator}
\alias{translator_set_language}
\alias{translator_list}
\title{Register a translator}
\usage{
translator_register(..., name = NULL)

translator_unregister(name = NULL)

translator_translate(..., name = NULL, package = NULL)

t_(..., name = NULL, package = NULL)

translator(name = NULL, package = NULL)

translator_set_language(language, name = NULL, package = NULL)

translator_list()
}
\arguments{
\item{...}{For \code{translator_register}, arguments passed to
\code{\link{i18n}} to build the translator object.  All
arguments are accepted.  For \code{translator_translate} and
\code{t_}, arguments passed to the \code{$t} method of the
translator object, being \code{string}, \code{data},
\code{language} etc.}

\item{name}{Optional name for the translator.  If omitted, this
will be determined automatically if called from package code}

\item{package}{Optional name for the package to find a translator
in.  This cannot be provided for \code{translator_register} and
\code{translator_unregister} as these should either be
registered by \code{name} or the package will be determined
automatically.}

\item{language}{Language to use, passed through to
\code{\link{i18n}}'s \code{set_language} method}
}
\description{
Register a translator within the \code{traduire} package, and use
it directly. This will allow your code to access translations via
\code{translator_translate} (or more concisely \code{t_}) without
having to pass around a translation object.  If called from
package code (and assuming a single translator per package) then
the \code{name} argument can be omitted and will be automatically
converted into \code{package:<packagename}).
}
\section{Use in package code}{


The intention is that this would typically be called from
  \code{.onLoad}, something like:

\preformatted{
.onLoad <- function(...) {
  path <- system.file("traduire.json", package = "hello", mustWork = TRUE)
  traduire::translator_register(path, "en")
}
}

and then used from that package's code as

\preformatted{
traduire::t_("key")
}

The language option for this translator can be changed by

\preformatted{
traduire::translator_set_language("es")
}

Every package's translator object is isolated from every other
  package, and if the \code{traduire} functions are called from
  your package code, then the correct translator should be found
  automatically.

If you need to get a translation for another package, you should
  use \code{package} argument, for example:

\preformatted{
traduire::t_("key", package = "other")
}

You can change the language in another package (e.g., using
  \code{traduire::change_language("en", package = "other")}) but
  should be careful to reset this using the returned reset
  function.

It is not possible to unregister a translator in another package,
  or to overwrite one.

Translators provided in other packages will be listed by
  \code{traduire::translator_list} with the prefix \code{package:}
  (e.g., \code{package:other}) however, you should not access them
  directly using \code{name = "package:other"}.
}

\examples{
path <- system.file("examples/simple.json", package = "traduire")
traduire::translator_register(path, name = "myexample")
traduire::t_("hello", language = "fr", name = "myexample")
"myexample" \%in\% traduire::translator_list()
traduire::translator_unregister("myexample")
}
