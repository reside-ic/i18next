% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lint.R
\name{lint_translations}
\alias{lint_translations}
\alias{lint_translations_package}
\title{Lint translations}
\usage{
lint_translations(path, obj, language = NULL, root = NULL, title = NULL)

lint_translations_package(root, language = NULL)
}
\arguments{
\item{path}{Path to the translations to test.  This can be a
character vector of file names and directory names - directory
names are expanded (non-recursively) to find all \code{.R} files.}

\item{obj}{A translator object.}

\item{language}{Optional language to use as the language to lint.
Each language must be at present linted separately}

\item{root}{A root directory, below which the files in \code{path}
will be treated relatively (e.g., pass a package's root
directory here, and then set \code{path = "R"}).  Using this
shortens the reported filenames considerably}

\item{title}{An optional title that will be used in reporting}
}
\value{
A \code{lint_translations} object, which can be passed
  through to \code{\link{lint_translations_report}}
}
\description{
Find likely translation errors using static source code analysis.
We look into a series of R source files and identify all calls to
\code{t_} and examine the key and interpolation data used within
these calls.
}
\details{
This will expand in future and is currently quite limited.
Currently, only calls to \code{t_()} are inspected - not calls to
\code{$t()} in a translator object, not calls to \code{$replace}
etc.  The \code{package} and \code{name} arguments to \code{t_()}
are also currently ignored, which will lead to spurious errors.  A
version of this that automatically works for packages will also be
written.  The key and interpolation data must (currently) be
literals - you cannot save the key or data as a variable and pass
that by variable name.

The function \code{lint_translations_package} is a wrapper around
\code{lint_translations} to make working with a package a bit
easier.  It's a bit flakey at the moment because the translator
will be loaded from the currently installed package, but the usage
will be checked in the source tree.  This will be addressed in a
future version (see reside-90)
}
